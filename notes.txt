Magesh Kuppan

Schedule:
    Commence    : 9:30 AM
    Tea Break   : 11:00 AM (20 mins)
    Lunch Break : 1:00 PM (1 Hr)
    Tea Break   : 3:30 PM (20 mins)
    Wind up     : 5:30 PM

Methodoly:
    Hands on driven
    No powerpoints

About You:
    Name
    Total Experience
    Primary skillset
    Experience in Golang
    Any interesting books / shows you read / watched recently

Go ?
    1. Concurrency
    2. Implicit implementation of interfaces
    3. Standard library
    4. Simplicity (only 25 keywords)
    5. Easy to unit test, inbuilt testing framework
    6. Compiling to native code
    7. Performance compared to C
    8. Higher Order Functions
    9. Built in Garbage Collection

Higher Order Functions
    Functions are treated as data
        1. Functions can be assigned to variables
        2. Functions can be passed as arguments to other functions
        3. Functions can be returned by other functions
        4. Closures

Goroutines
    1. Go routines are lightweight threads of execution
    2. 4KB of stack space
    3. Go runtine has a builtin scheduler
    4. 'go' keyword

    Channels
        ch := make(chan int)

        sending data to the channel
            ch <- 10
            blocking operation?
                it depends...
                    if a read operation on the channel is not initiated yet, then the write operation will be blocked
                    If the channel is a buffered channel and the channel is full, then the write operation will be blocked

        receiving data from the channel
            val := <- ch
            receiving data from the channel is a blocking operation

    Never assume during Concurrency programming
        1. Time taken for a goroutine to complete
        2. Sequence of execution of goroutines




